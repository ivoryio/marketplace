AWSTemplateFormatVersion: '2010-09-09'
Description: User management
Outputs:
  IdentityPoolId:
    Export:
      Name:
        Fn::Sub: ${ProjectPrefix}-${StageName}-IdentityPool::Id
    Value:
      Ref: IdentityPool
  UserPoolArn:
    Export:
      Name:
        Fn::Sub: ${ProjectPrefix}-${StageName}-UserPool::Arn
    Value:
      Fn::GetAtt:
      - UserPool
      - Arn
  UserPoolClientId:
    Export:
      Name:
        Fn::Sub: ${ProjectPrefix}-${StageName}-UserPoolClient::Id
    Value:
      Ref: UserPoolClient
  UserPoolId:
    Export:
      Name:
        Fn::Sub: ${ProjectPrefix}-${StageName}-UserPool::Id
    Value:
      Ref: UserPool
Parameters:
  IdentityPoolPrefix:
    Description: The prefix used in naming the IdentityPool
    Type: String
  ProjectPrefix:
    Description: Project prefix used to name the Cognito user pool
    Type: String
  StageName:
    Description: Application stage name
    Type: String
Resources:
  CognitoAuthorizedRole:
    Properties:
      AssumeRolePolicyDocument:
        Statement:
        - Action:
          - sts:AssumeRoleWithWebIdentity
          Condition:
            ForAnyValue:StringLike:
              cognito-identity.amazonaws.com:amr: authenticated
            StringEquals:
              cognito-identity.amazonaws.com:aud:
                Ref: IdentityPool
          Effect: Allow
          Principal:
            Federated: cognito-identity.amazonaws.com
        Version: '2012-10-17'
      Policies:
      - PolicyDocument:
          Statement:
          - Action:
            - mobileanalytics:PutEvents
            - cognito-sync:*
            - cognito-identity:*
            Effect: Allow
            Resource: '*'
          - Action:
            - lambda:InvokeFunction
            Effect: Allow
            Resource: '*'
          - Action:
            - execute-api:Invoke
            Effect: Allow
            Resource: '*'
          Version: '2012-10-17'
        PolicyName: CognitoAuthorizedPolicy
    Type: AWS::IAM::Role
  CognitoUnAuthorizedRole:
    Properties:
      AssumeRolePolicyDocument:
        Statement:
        - Action:
          - sts:AssumeRoleWithWebIdentity
          Condition:
            ForAnyValue:StringLike:
              cognito-identity.amazonaws.com:amr: unauthenticated
            StringEquals:
              cognito-identity.amazonaws.com:aud:
                Ref: IdentityPool
          Effect: Allow
          Principal:
            Federated: cognito-identity.amazonaws.com
        Version: '2012-10-17'
      Policies:
      - PolicyDocument:
          Statement:
          - Action:
            - mobileanalytics:PutEvents
            - cognito-sync:*
            Effect: Allow
            Resource: '*'
          Version: '2012-10-17'
        PolicyName: CognitoUnauthorizedPolicy
    Type: AWS::IAM::Role
  IdentityPool:
    Properties:
      AllowUnauthenticatedIdentities: false
      CognitoIdentityProviders:
      - ClientId:
          Ref: UserPoolClient
        ProviderName:
          Fn::GetAtt:
          - UserPool
          - ProviderName
      IdentityPoolName:
        Fn::Sub: ${IdentityPoolPrefix}_${StageName}_Identity
    Type: AWS::Cognito::IdentityPool
  IdentityPoolRoleMapping:
    Properties:
      IdentityPoolId:
        Ref: IdentityPool
      Roles:
        authenticated:
          Fn::GetAtt:
          - CognitoAuthorizedRole
          - Arn
        unauthenticated:
          Fn::GetAtt:
          - CognitoUnAuthorizedRole
          - Arn
    Type: AWS::Cognito::IdentityPoolRoleAttachment
  LambdaCognitoUserPoolExecutionPermission:
    Properties:
      Action: lambda:InvokeFunction
      FunctionName:
        Fn::GetAtt:
        - PreSignupLambdaFunction
        - Arn
      Principal: cognito-idp.amazonaws.com
      SourceArn:
        Fn::Sub: arn:aws:cognito-idp:${AWS::Region}:${AWS::AccountId}:userpool/${UserPool}
    Type: AWS::Lambda::Permission
  PreSignupLambdaFunction:
    Properties:
      CodeUri: s3://ivory-marketplace-build-artifacts/5f10e7156c3116918e99a8f35ae50df8
      Handler: index.singUpAutoConfirm
      InlineCode: "exports.singUpAutoConfirm = async (event, context, callback) =>\
        \ {\n  event.response.autoConfirmUser = true\n  return event }\n"
      Runtime: nodejs8.10
    Type: AWS::Serverless::Function
  UserPool:
    Properties:
      AutoVerifiedAttributes:
      - email
      LambdaConfig:
        PreSignUp:
          Fn::GetAtt:
          - PreSignupLambdaFunction
          - Arn
      Schema:
      - AttributeDataType: String
        Mutable: false
        Name: email
        Required: true
      - AttributeDataType: String
        Mutable: true
        Name: name
        Required: true
      - AttributeDataType: String
        Mutable: true
        Name: family_name
        Required: true
      - AttributeDataType: String
        Mutable: true
        Name: city
      - AttributeDataType: String
        Mutable: true
        Name: country
      UserPoolName:
        Fn::Sub: ${ProjectPrefix}-${StageName}-userpool
      UsernameAttributes:
      - email
    Type: AWS::Cognito::UserPool
  UserPoolClient:
    Properties:
      ClientName:
        Fn::Sub: ${ProjectPrefix}-client
      GenerateSecret: false
      UserPoolId:
        Ref: UserPool
    Type: AWS::Cognito::UserPoolClient
Transform: AWS::Serverless-2016-10-31
